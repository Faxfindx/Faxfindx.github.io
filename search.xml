<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BZOJ3105 [CQOI2013] 新Nim游戏</title>
    <url>/2020/12/19/BZOJ3105-CQOI2013-%E6%96%B0Nim%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>$k$堆石子，两个人游戏：</p>
<ul>
<li><p>首先，A拿走若干堆石子（不能全部拿走）</p>
</li>
<li><p>之后，B拿走若干堆石子（不能全部拿走）</p>
</li>
<li><p>然后从A开始$Nim$游戏。</p>
</li>
</ul>
<p>问A能不能取胜。如果能，A第一步至少要拿走多少石子？</p>
<a id="more"></a>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>显然可以取胜。A拿的只剩1堆，B不能拿走，A全拿完，B输了。</p>
<p>考虑A第一次拿完之后，剩下的石子在异或意义下必须线性无关。否则B找出一组石子异或为0，A就输掉了。</p>
<p>那么A拿走的石子尽量少等价于剩下的石子尽量多。</p>
<p>也就是求最大权线性无关组，权值即为石子个数。</p>
<p>线性无关组是一个拟阵（遗传性易证，交换性来说，如果两个线性无关组$X$和$Y$，$|X|&lt;|Y|$，那么$X$张成的线性空间有$|X|$维，$Y$张成的线性空间有$|Y|$维，后者中必能选出一个元素加到$|X|$中线性无关）。</p>
<p>所以我们从大到小判断每堆石子能不能保留即可。</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> J[<span class="number">32</span>], A[K];</span><br><span class="line"><span class="keyword">bool</span> mark[K];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> b &lt; a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> k;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">  <span class="built_in">std</span>::sort(A, A + k, cmp);</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j, l; i &lt; k; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (l = <span class="number">31</span>, j = A[i]; ~l; --l)</span><br><span class="line">      <span class="keyword">if</span> ((j &gt;&gt; l) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!J[l]) &#123; J[l] = j; <span class="keyword">break</span>; &#125;</span><br><span class="line">        <span class="keyword">else</span> j ^= J[l];</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="number">-1</span>) ans += A[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Solutions</category>
      </categories>
      <tags>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title>BZOJ5006 [THUWC2017] 随机二分图</title>
    <url>/2020/12/19/BZOJ5006-THUWC2017-%E9%9A%8F%E6%9C%BA%E4%BA%8C%E5%88%86%E5%9B%BE/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>有一个左右各 $n$ 个点的二分图。有 $m$ 组有概率出现的边，分为三种：</p>
<ol>
<li>一组一条边，出现或不出现的概率各有 50%。</li>
<li>一组两条边，同时出现或同时不出现的概率各有 50%。</li>
<li>一组两条边，必定会恰好出现一条，概率各有 50%。</li>
</ol>
<p>组与组之间的概率是独立的。</p>
<p>问完美匹配的期望个数 $E$ ，输出 $2^nE \pmod {10^9+7}$ （显然是整数）。</p>
<a id="more"></a>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>期望是可加的。所以可以枚举每个完美匹配求出现的概率和。复杂度 $O(n*n!)$ ， 20pts 。</p>
<p>为什么要枚举完美匹配呢？能不能状压 DP 求 $f_{S1,S2}$ 表示左右边各剩下 $S1, S2$ 时完美匹配个数呢？</p>
<p>因为第 2, 3 种边不好统计。假设只有第 1 种边。$O(m\sum_{i=0}^n {n \choose i}^2)$ （由于好多状态其实访问不到所以复杂度其实是 O( 玄学 ) ），配合上面那个有 40pts 。</p>
<p>考虑有第 2, 3 种边。如果我枚举的匹配中，不存在某两条边在同一组，那么它的概率肯定是 $2^{-n}$ 。</p>
<p>那么我考虑暂时把第 2, 3 种边拆开成两条独立的边，看对答案有什么影响。</p>
<p>如果某个匹配同时用到了第 2 种边某组中的两条（两条边的端点显然互不相同），那么应该有 $\frac12$ 的概率。但是如果我把它看成独立的两条边的话就是 $\frac14$ 的概率。所以我新建“一条边”连着这 4 个点，出现概率为 $\frac14$ 。这样一来这个匹配就会被算两遍，每遍都有 $\frac14$ ，一共就是 $\frac12$ 。</p>
<p>同样的，如果某个匹配同时用到了某组第 3 种边的两条，那么它会多算 $\frac14$ 的概率。那么我新建“一条边”连接这 4 个点，出现概率为 $-\frac14$ 。（似乎很魔幻）这样就可以把多出来的那 $\frac 14$ 抵消掉了。</p>
<p>然后状压 DP 就好了。</p>
<p>状态开不下？开 map 啊！</p>
<p>map 太慢？ <del>unordered_map</del> 手写 hash 表啊！</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> Hash&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">29999999</span>;</span><br><span class="line">  <span class="keyword">int</span> key[Mod], val[Mod];</span><br><span class="line">  <span class="keyword">int</span> lastt, lasts;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = t % Mod;</span><br><span class="line">    <span class="keyword">while</span> (key[s] != t &amp;&amp; key[s] != <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">if</span> (++s == Mod) s = <span class="number">0</span>;</span><br><span class="line">    lastt = t; lasts = s;</span><br><span class="line">    <span class="keyword">return</span> key[s] == t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> &amp;<span class="title">query</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = t % Mod;</span><br><span class="line">    <span class="keyword">if</span> (t == lastt) s = lasts;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">while</span> (key[s] != t &amp;&amp; key[s] != <span class="number">0</span>) <span class="keyword">if</span> (++s == Mod) s = <span class="number">0</span>;</span><br><span class="line">    key[s] = t;</span><br><span class="line">    <span class="keyword">return</span> val[s];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, A[M], B[M], C[M];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> S1, <span class="keyword">int</span> S2)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// E[S1,S2] * 2^|S|</span></span><br><span class="line">  <span class="keyword">if</span> (S1 == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (Hash::count(S1 &lt;&lt; n | S2)) <span class="keyword">return</span> Hash::query(S1 &lt;&lt; n | S2);</span><br><span class="line">  <span class="keyword">int</span> &amp;ans = Hash::query(S1 &lt;&lt; n | S2) = <span class="number">0</span>, x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ((S1 &gt;&gt; x &amp; <span class="number">1</span>) == <span class="number">0</span>) ++x;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    <span class="keyword">if</span> ((A[i] &amp; S1) == A[i] &amp;&amp; (B[i] &amp; S2) == B[i] &amp;&amp; (A[i] &gt;&gt; x &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">    ans = (ans + f(S1 &amp; ~A[i], S2 &amp; ~B[i]) * C[i]) % mod;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> c;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;c);</span><br><span class="line">  <span class="keyword">while</span> (c--) &#123;</span><br><span class="line">    <span class="keyword">int</span> t, x, y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">      A[m] = <span class="number">1</span> &lt;&lt; (x - <span class="number">1</span>), B[m] = <span class="number">1</span> &lt;&lt; (y - <span class="number">1</span>), C[m++] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">      A[m] = <span class="number">1</span> &lt;&lt; (x - <span class="number">1</span>), B[m] = <span class="number">1</span> &lt;&lt; (y - <span class="number">1</span>), C[m++] = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">      A[m] = <span class="number">1</span> &lt;&lt; (x - <span class="number">1</span>), B[m] = <span class="number">1</span> &lt;&lt; (y - <span class="number">1</span>), C[m++] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (A[m - <span class="number">1</span>] != A[m - <span class="number">2</span>] &amp;&amp; B[m - <span class="number">1</span>] != B[m - <span class="number">2</span>]) &#123;</span><br><span class="line">        A[m] = A[m - <span class="number">1</span>] | A[m - <span class="number">2</span>], B[m] = B[m - <span class="number">1</span>] | B[m - <span class="number">2</span>];</span><br><span class="line">        C[m++] = (t == <span class="number">1</span> ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (f((<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>, (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>) + mod) % mod);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Solutions</category>
      </categories>
      <tags>
        <tag>状压DP</tag>
      </tags>
  </entry>
  <entry>
    <title>2021牛客寒假算法基础集训营1 题目解析及知识点整理</title>
    <url>/2021/02/02/2021-2-2-%E7%89%9B%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p><a id="more"></a> <a href="https://ac.nowcoder.com/discuss/593200?type=101&amp;channel=-1&amp;source_id=0">官方题解</a></p>
<h2 id="A-串"><a href="#A-串" class="headerlink" title="A    .  串"></a>A    .  串</h2></blockquote>
<p><font color=#FF0000> 考察点：动态规划</font><br><strong>这一题用到的是动态规划。对于$dp[i]$表示的是成都为$i$的字符串方案数是多少。现在考虑前一个状态对于后一个状态的影响。</strong></p>
<ul>
<li><strong>第一种情况$i$这个长度的字符串里有”us”，那第$i+1$个位置就随便填，方案数就是$dp[i]*26$。</strong></li>
<li><strong>第二种情况前$i$的字符串里只有”s”没有“us”，那第$i$位置就只填”s”，方案数就是，</strong>$26^i-dp[i]-25^i$<strong>，其中$dp[i]$表示有”us”的方案数，$25^i$表示不填”u”的情况。</strong><br><strong>还有一点就是要注意取模。下面是递推代码。</strong><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ll d[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	d[<span class="number">2</span>] = <span class="number">1l</span>l;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++)</span><br><span class="line">		d[i] = (d[i - <span class="number">1</span>] * <span class="number">26</span> % mod + qpow(<span class="number">26</span>, i - <span class="number">1</span>, mod) - d[i - <span class="number">1</span>] - qpow(<span class="number">25</span>, i - <span class="number">1</span>, mod) + mod) % mod;</span><br><span class="line">	ll ans = <span class="number">0l</span>l;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">		ans = (ans + d[i]) % mod;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://blog.csdn.net/ailaojie/article/details/83014821">经典中的经典算法:动态规划</a><br><a href="https://vjudge.net/contest/68966#overview">kuangbin动态规划入门专题</a></p>
</blockquote>
</li>
</ul>
<h2 id="B-括号"><a href="#B-括号" class="headerlink" title="B . 括号"></a>B . 括号</h2><p><font color=#FF0000> 考察点：构造</font><br><strong>简单的构造题，构造方法有很多。</strong></p>
<h2 id="C-红和蓝"><a href="#C-红和蓝" class="headerlink" title="C . 红和蓝"></a>C . 红和蓝</h2><p><font color=#FF0000> 考察点：dfs，图论</font><br><strong>这题还是比较有难度的，对于这个题最主要的是找到性质，一共有两种写法。在这里引用一下别人的一份题解。</strong><br><img src="https://img-blog.csdnimg.cn/2021020216404691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1hteDY2NjY2Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>上面的讲解都很详细，我在这题不过多赘述。下面是代码。</strong></p>
<p><strong>第一种解法</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;G[N];</span><br><span class="line"><span class="keyword">int</span> ji[N], cnt, col[N];</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> son = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> v : G[x]) &#123;</span><br><span class="line">		<span class="keyword">if</span> (v == fa)<span class="keyword">continue</span>;</span><br><span class="line">		dfs(v, x);                <span class="comment">//先遍历子树这样才能保证每个节点被标记</span></span><br><span class="line">		son++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (son == <span class="number">0</span> || ji[x] == <span class="number">0</span>) &#123;    <span class="comment">//如果这个点没被标记但是他不是叶子说明他和他的子节点不一样只能和父亲节点一样</span></span><br><span class="line">		<span class="keyword">if</span> (ji[fa] != <span class="number">0</span>) &#123;           </span><br><span class="line">			flag = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ji[fa] = ji[x] = ++cnt;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> v : G[x]) &#123;</span><br><span class="line">		<span class="keyword">if</span> (v == fa)<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (ji[x] == ji[v])col[v] = col[x];</span><br><span class="line">		<span class="keyword">else</span> col[v] = col[x] ^ <span class="number">1</span>;</span><br><span class="line">		dfs2(v, x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> u, v;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">		G[u].push_back(v), G[v].push_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (flag || ji[<span class="number">0</span>]) &#123;      <span class="comment">//如果根节点和0被标记了说明根节点与他的子节点都不相同，这是不可能的</span></span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	col[<span class="number">1</span>] = <span class="number">0</span>;                  <span class="comment">//0/1都一样</span></span><br><span class="line">	dfs2(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (col[i] == <span class="number">1</span>)<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;R&#x27;</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>出题人解法</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;G[N];</span><br><span class="line"><span class="keyword">int</span> sizen[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;    <span class="comment">//找每个子树的大小</span></span><br><span class="line">	sizen[x] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> v : G[x]) &#123;</span><br><span class="line">		<span class="keyword">if</span> (v == fa)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		dfs(v, x);</span><br><span class="line">		sizen[x] += sizen[v];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ji[N], cnt;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (ji[x] == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> odd = <span class="number">0</span>, id = <span class="number">0</span>;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : G[x]) &#123;</span><br><span class="line">			<span class="keyword">if</span> (v == fa)<span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span> (sizen[v] % <span class="number">2</span>) &#123;</span><br><span class="line">				odd++, id = v;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (odd &gt; <span class="number">1</span>) &#123;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!odd) &#123;</span><br><span class="line">			flag = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ji[x] = ji[id] = ++cnt;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> v : G[x]) &#123;</span><br><span class="line">		<span class="keyword">if</span> (v == fa)<span class="keyword">continue</span>;</span><br><span class="line">		dfs2(v, x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> clo[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs3</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> v : G[x]) &#123;</span><br><span class="line">		<span class="keyword">if</span> (v == fa)<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (ji[x] == ji[v])clo[v] = clo[x];</span><br><span class="line">		<span class="keyword">else</span> clo[v] = clo[x] ^ <span class="number">1</span>;</span><br><span class="line">		dfs3(v, x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> u, v;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">		G[u].push_back(v), G[v].push_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	dfs2(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (flag) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	clo[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	dfs3(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (clo[i] == <span class="number">1</span>)<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;R&#x27;</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-点一成零"><a href="#D-点一成零" class="headerlink" title="D . 点一成零"></a>D . 点一成零</h2><p><font color=#FF0000> 考察点：并查集</font><br><strong>这题主要考的是并查集维护连通块大小和数量，不要被题目吓到，这题虽然代码量大，但是很好想。</strong><br><a href="https://blog.csdn.net/liujian20150808/article/details/50848646?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161225606716780274167011%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161225606716780274167011&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-1-50848646.pc_search_result_cache&amp;utm_term=%E5%B9%B6%E6%9F%A5%E9%9B%86%E8%AE%B2%E8%A7%A3&amp;spm=1018.2226.3001.4187">这里提供一个并查集经典例题的讲解</a><br><strong>这题主要思路是，我们对于这个二维图，把他们的坐标转化成一维即$(x,y)-&gt;x*n+y$，把坐标转化为一维以后我们用并查集，来维护每个连通块的大小，还有连通块的数量。初始化我们把每个点当成一个单独的连通块（大小为1）。然后对于没个为1的点，我们遍历他的相邻点，如果也为1，就合并。同时因为每次合并的操作对连通块数量的改变最多为1，答案很好维护。</strong><br><strong>下面是代码。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll b, ll mod)</span> </span>&#123; ll res = <span class="number">1</span>; <span class="keyword">for</span> (; b &gt; <span class="number">0</span>; b &gt;&gt;= <span class="number">1</span>) &#123; <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = res * a % mod; a = a * a % mod; &#125; <span class="keyword">return</span> res; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">inv</span><span class="params">(ll a, ll p)</span> </span>&#123; <span class="keyword">return</span> qpow(a, p - <span class="number">2</span>, p); &#125;   <span class="comment">//这里是求逆元的操作</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">250015</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">505</span>][<span class="number">505</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> pre[N];</span><br><span class="line"><span class="keyword">int</span> sizen[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_id</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> i * n + j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x == pre[x] ? x : pre[x] = find(pre[x]);</span><br><span class="line">&#125;</span><br><span class="line">ll ans = <span class="number">1l</span>l; <span class="comment">//记录答案</span></span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;  <span class="comment">//记录连通块的数量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unioun</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> xx = find(x), yy = find(y);</span><br><span class="line">	<span class="keyword">if</span> (xx == yy)<span class="keyword">return</span>;</span><br><span class="line">	ans = ans * inv(cnt, mod) % mod;</span><br><span class="line">	cnt--;</span><br><span class="line"> 	ans = ans * inv(sizen[xx], mod) % mod * inv(sizen[yy], mod) % mod;</span><br><span class="line">	ans = ans * (sizen[xx] + sizen[yy]) % mod;</span><br><span class="line">	sizen[xx] += sizen[yy];</span><br><span class="line">	pre[yy] = xx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MPDFDFL</span></span><br><span class="line">	freopen(<span class="string">&quot;D:/input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">	<span class="comment">//freopen(&quot;D:/output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s[i]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n * n + <span class="number">10</span>; i++)</span><br><span class="line">		pre[i] = i;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s[i][j] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">				ans = (ans * ++cnt) % mod, sizen[get_id(i, j)] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">					<span class="keyword">int</span> sx = dx[k] + i, sy = j + dy[k];</span><br><span class="line">					<span class="keyword">if</span> (s[sx][sy] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">						unioun(get_id(i, j), get_id(sx, sy));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">int</span> q;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">	<span class="keyword">while</span> (q--) &#123;</span><br><span class="line">		<span class="keyword">int</span> x, y;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		<span class="keyword">if</span> (s[x][y] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		s[x][y] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">		sizen[get_id(x, y)] = <span class="number">1</span>;</span><br><span class="line">		cnt++;</span><br><span class="line">		ans = ans * cnt % mod;</span><br><span class="line">		<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> sx = dx[i] + x, sy = y + dy[i];</span><br><span class="line">			<span class="keyword">if</span> (s[sx][sy] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">				unioun(get_id(sx, sy), get_id(x, y));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> TIME;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-三棱锥之刻"><a href="#E-三棱锥之刻" class="headerlink" title="E . 三棱锥之刻"></a>E . 三棱锥之刻</h2><p><font color=#FF0000> 考察点：计算几何</font><br><strong>高中立体几何知识，自己推公式即可。</strong></p>
<h2 id="F-对答案一时爽"><a href="#F-对答案一时爽" class="headerlink" title="F . 对答案一时爽"></a>F . 对答案一时爽</h2><p><font color=#FF0000> 考察点：贪心</font><br><strong>签到题。</strong></p>
<h2 id="G-好玩的数字游戏"><a href="#G-好玩的数字游戏" class="headerlink" title="G .     好玩的数字游戏"></a>G .     好玩的数字游戏</h2><p><font color=#FF0000> 考察点：模拟</font><br><strong>按照题意模拟即可</strong></p>
<h2 id="H-幂塔个位数的计算"><a href="#H-幂塔个位数的计算" class="headerlink" title="H . 幂塔个位数的计算"></a>H . 幂塔个位数的计算</h2><p><font color=#FF0000> 考察点：欧拉降幂，找规律</font><br><strong>这题官方题解里给的是找规律。这里不在多讲，主要讲一下欧拉降幂的解法。</strong></p>
<p><a href="https://blog.csdn.net/weixin_43238423/article/details/102705549?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161225677616780266294990%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161225677616780266294990&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-2-102705549.pc_search_result_cache&amp;utm_term=%E6%AC%A7%E6%8B%89%E9%99%8D%E5%B9%82&amp;spm=1018.2226.3001.4187">这是一个欧拉降幂的算法讲解</a><br><a href="https://blog.csdn.net/Pedro_Lee/article/details/51458773?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-3.control">这一题其实是欧拉降幂的一个经典例题的延申。</a><br><strong>如果懂了上面哪一题以后这题就非常好理解。很明显这题虽然不是无限的，但是模数是固定的，就是10，所以根据欧拉函数，他最多迭代四层，之后答案就不会在改变了。这里我们控制一下迭代层数，还有每次次迭代处理的模数，这题就解决了。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll b, ll mod)</span> </span>&#123; ll res = <span class="number">1</span>; <span class="keyword">for</span> (; b &gt; <span class="number">0</span>; b &gt;&gt;= <span class="number">1</span>) &#123; <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = res * a % mod; a = a * a % mod; &#125; <span class="keyword">return</span> res; &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> phi[<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="built_in">string</span> x,<span class="keyword">int</span> MOD)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = SZ(x);</span><br><span class="line">	<span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">		res = (res*<span class="number">10</span> + x[i] - <span class="string">&#x27;0&#x27;</span>) % MOD;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="built_in">string</span> x, <span class="keyword">int</span> MOD,<span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (MOD == <span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (cnt == <span class="number">1</span>)<span class="keyword">return</span> mo(x, MOD);</span><br><span class="line">	<span class="keyword">return</span> (qpow(mo(x, MOD) , f(x, phi[MOD], cnt - <span class="number">1</span>) + phi[MOD], MOD) + MOD) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	phi[<span class="number">10</span>] = <span class="number">4</span>, phi[<span class="number">4</span>] = <span class="number">2</span>, phi[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">string</span> a, b;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (SZ(b) &gt; <span class="number">1</span>)cnt = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">else</span> cnt = min(<span class="number">10</span>, b[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (f(a, <span class="number">10</span>, cnt) % <span class="number">10</span> + <span class="number">10</span>) % <span class="number">10</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="I-限制不互素对的排列"><a href="#I-限制不互素对的排列" class="headerlink" title="I . 限制不互素对的排列"></a>I . 限制不互素对的排列</h2><p><font color=#FF0000> 考察点：构造</font><br><strong>这题同样是一个简单的构造，构造方法很多这里不在多讲。</strong></p>
<h2 id="J-一群小青蛙呱蹦呱蹦呱"><a href="#J-一群小青蛙呱蹦呱蹦呱" class="headerlink" title="J    . 一群小青蛙呱蹦呱蹦呱"></a>J    . 一群小青蛙呱蹦呱蹦呱</h2><p><font color=#FF0000> 考察点：素数筛</font><br><a href="https://blog.csdn.net/qq_43765333/article/details/113527311?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161225741116780255258522%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161225741116780255258522&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-1-113527311.pc_search_result_cache&amp;utm_term=%09%E4%B8%80%E7%BE%A4%E5%B0%8F%E9%9D%92%E8%9B%99%E5%91%B1%E8%B9%A6%E5%91%B1%E8%B9%A6%E5%91%B1&amp;spm=1018.2226.3001.4187">这里引用一下别人的一个题解讲的很好。</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e8</span> + <span class="number">10</span>;</span><br><span class="line"><span class="function">ll <span class="title">Pow</span><span class="params">(ll x, ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">			res = res*x%mod;</span><br><span class="line">		y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">		x = x*x%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[N]; <span class="keyword">int</span> p[<span class="number">12000000</span>];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!vis[i])</span><br><span class="line">			p[++tot] = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot&amp;&amp;i*p[j] &lt; N; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			vis[i*p[j]] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (i%p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	init();</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">if</span> (n &lt;= <span class="number">5</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;empty&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	ll ans = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> x = n / <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (x &gt; <span class="number">1</span>) x /= <span class="number">2</span>, cnt++;</span><br><span class="line">	ans = ans*Pow(<span class="number">2</span>, cnt) % mod;</span><br><span class="line">	<span class="keyword">int</span> pp = <span class="built_in">sqrt</span>(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= tot&amp;&amp;p[i]&lt;=n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (p[i] &gt; pp)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (n / p[i] &gt; <span class="number">1</span>)</span><br><span class="line">				ans = ans*p[i] % mod;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			cnt = <span class="number">0</span>;</span><br><span class="line">			x = n / <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">while</span> (x &gt;= p[i]) x /= p[i], cnt++;</span><br><span class="line">			ans = ans*Pow(p[i], cnt) % mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Solutions</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
</search>
