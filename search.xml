<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BZOJ3105 [CQOI2013] 新Nim游戏</title>
    <url>/2020/12/19/BZOJ3105-CQOI2013-%E6%96%B0Nim%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>$k$堆石子，两个人游戏：</p>
<ul>
<li><p>首先，A拿走若干堆石子（不能全部拿走）</p>
</li>
<li><p>之后，B拿走若干堆石子（不能全部拿走）</p>
</li>
<li><p>然后从A开始$Nim$游戏。</p>
</li>
</ul>
<p>问A能不能取胜。如果能，A第一步至少要拿走多少石子？</p>
<a id="more"></a>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>显然可以取胜。A拿的只剩1堆，B不能拿走，A全拿完，B输了。</p>
<p>考虑A第一次拿完之后，剩下的石子在异或意义下必须线性无关。否则B找出一组石子异或为0，A就输掉了。</p>
<p>那么A拿走的石子尽量少等价于剩下的石子尽量多。</p>
<p>也就是求最大权线性无关组，权值即为石子个数。</p>
<p>线性无关组是一个拟阵（遗传性易证，交换性来说，如果两个线性无关组$X$和$Y$，$|X|&lt;|Y|$，那么$X$张成的线性空间有$|X|$维，$Y$张成的线性空间有$|Y|$维，后者中必能选出一个元素加到$|X|$中线性无关）。</p>
<p>所以我们从大到小判断每堆石子能不能保留即可。</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> J[<span class="number">32</span>], A[K];</span><br><span class="line"><span class="keyword">bool</span> mark[K];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> b &lt; a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> k;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">  <span class="built_in">std</span>::sort(A, A + k, cmp);</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j, l; i &lt; k; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (l = <span class="number">31</span>, j = A[i]; ~l; --l)</span><br><span class="line">      <span class="keyword">if</span> ((j &gt;&gt; l) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!J[l]) &#123; J[l] = j; <span class="keyword">break</span>; &#125;</span><br><span class="line">        <span class="keyword">else</span> j ^= J[l];</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="number">-1</span>) ans += A[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Solutions</category>
      </categories>
      <tags>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title>BZOJ5006 [THUWC2017] 随机二分图</title>
    <url>/2020/12/19/BZOJ5006-THUWC2017-%E9%9A%8F%E6%9C%BA%E4%BA%8C%E5%88%86%E5%9B%BE/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>有一个左右各 $n$ 个点的二分图。有 $m$ 组有概率出现的边，分为三种：</p>
<ol>
<li>一组一条边，出现或不出现的概率各有 50%。</li>
<li>一组两条边，同时出现或同时不出现的概率各有 50%。</li>
<li>一组两条边，必定会恰好出现一条，概率各有 50%。</li>
</ol>
<p>组与组之间的概率是独立的。</p>
<p>问完美匹配的期望个数 $E$ ，输出 $2^nE \pmod {10^9+7}$ （显然是整数）。</p>
<a id="more"></a>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>期望是可加的。所以可以枚举每个完美匹配求出现的概率和。复杂度 $O(n*n!)$ ， 20pts 。</p>
<p>为什么要枚举完美匹配呢？能不能状压 DP 求 $f_{S1,S2}$ 表示左右边各剩下 $S1, S2$ 时完美匹配个数呢？</p>
<p>因为第 2, 3 种边不好统计。假设只有第 1 种边。$O(m\sum_{i=0}^n {n \choose i}^2)$ （由于好多状态其实访问不到所以复杂度其实是 O( 玄学 ) ），配合上面那个有 40pts 。</p>
<p>考虑有第 2, 3 种边。如果我枚举的匹配中，不存在某两条边在同一组，那么它的概率肯定是 $2^{-n}$ 。</p>
<p>那么我考虑暂时把第 2, 3 种边拆开成两条独立的边，看对答案有什么影响。</p>
<p>如果某个匹配同时用到了第 2 种边某组中的两条（两条边的端点显然互不相同），那么应该有 $\frac12$ 的概率。但是如果我把它看成独立的两条边的话就是 $\frac14$ 的概率。所以我新建“一条边”连着这 4 个点，出现概率为 $\frac14$ 。这样一来这个匹配就会被算两遍，每遍都有 $\frac14$ ，一共就是 $\frac12$ 。</p>
<p>同样的，如果某个匹配同时用到了某组第 3 种边的两条，那么它会多算 $\frac14$ 的概率。那么我新建“一条边”连接这 4 个点，出现概率为 $-\frac14$ 。（似乎很魔幻）这样就可以把多出来的那 $\frac 14$ 抵消掉了。</p>
<p>然后状压 DP 就好了。</p>
<p>状态开不下？开 map 啊！</p>
<p>map 太慢？ <del>unordered_map</del> 手写 hash 表啊！</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> Hash&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">29999999</span>;</span><br><span class="line">  <span class="keyword">int</span> key[Mod], val[Mod];</span><br><span class="line">  <span class="keyword">int</span> lastt, lasts;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = t % Mod;</span><br><span class="line">    <span class="keyword">while</span> (key[s] != t &amp;&amp; key[s] != <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">if</span> (++s == Mod) s = <span class="number">0</span>;</span><br><span class="line">    lastt = t; lasts = s;</span><br><span class="line">    <span class="keyword">return</span> key[s] == t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> &amp;<span class="title">query</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = t % Mod;</span><br><span class="line">    <span class="keyword">if</span> (t == lastt) s = lasts;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">while</span> (key[s] != t &amp;&amp; key[s] != <span class="number">0</span>) <span class="keyword">if</span> (++s == Mod) s = <span class="number">0</span>;</span><br><span class="line">    key[s] = t;</span><br><span class="line">    <span class="keyword">return</span> val[s];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, A[M], B[M], C[M];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> S1, <span class="keyword">int</span> S2)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// E[S1,S2] * 2^|S|</span></span><br><span class="line">  <span class="keyword">if</span> (S1 == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (Hash::count(S1 &lt;&lt; n | S2)) <span class="keyword">return</span> Hash::query(S1 &lt;&lt; n | S2);</span><br><span class="line">  <span class="keyword">int</span> &amp;ans = Hash::query(S1 &lt;&lt; n | S2) = <span class="number">0</span>, x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ((S1 &gt;&gt; x &amp; <span class="number">1</span>) == <span class="number">0</span>) ++x;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    <span class="keyword">if</span> ((A[i] &amp; S1) == A[i] &amp;&amp; (B[i] &amp; S2) == B[i] &amp;&amp; (A[i] &gt;&gt; x &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">    ans = (ans + f(S1 &amp; ~A[i], S2 &amp; ~B[i]) * C[i]) % mod;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> c;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;c);</span><br><span class="line">  <span class="keyword">while</span> (c--) &#123;</span><br><span class="line">    <span class="keyword">int</span> t, x, y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">      A[m] = <span class="number">1</span> &lt;&lt; (x - <span class="number">1</span>), B[m] = <span class="number">1</span> &lt;&lt; (y - <span class="number">1</span>), C[m++] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">      A[m] = <span class="number">1</span> &lt;&lt; (x - <span class="number">1</span>), B[m] = <span class="number">1</span> &lt;&lt; (y - <span class="number">1</span>), C[m++] = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">      A[m] = <span class="number">1</span> &lt;&lt; (x - <span class="number">1</span>), B[m] = <span class="number">1</span> &lt;&lt; (y - <span class="number">1</span>), C[m++] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (A[m - <span class="number">1</span>] != A[m - <span class="number">2</span>] &amp;&amp; B[m - <span class="number">1</span>] != B[m - <span class="number">2</span>]) &#123;</span><br><span class="line">        A[m] = A[m - <span class="number">1</span>] | A[m - <span class="number">2</span>], B[m] = B[m - <span class="number">1</span>] | B[m - <span class="number">2</span>];</span><br><span class="line">        C[m++] = (t == <span class="number">1</span> ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (f((<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>, (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>) + mod) % mod);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Solutions</category>
      </categories>
      <tags>
        <tag>状压DP</tag>
      </tags>
  </entry>
</search>
